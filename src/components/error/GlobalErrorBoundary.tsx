// Global error boundary with comprehensive error handling

import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { AlertTriangle, RefreshCw, Home, Bug } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n  errorId: string;\n}\n\nclass GlobalErrorBoundary extends Component<Props, State> {\n  private retryCount = 0;\n  private maxRetries = 3;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: '',\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return {\n      hasError: true,\n      error,\n      errorId: `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    this.setState({ errorInfo });\n    \n    // Log error for monitoring\n    this.logError(error, errorInfo);\n    \n    // Call custom error handler if provided\n    this.props.onError?.(error, errorInfo);\n  }\n\n  private logError = (error: Error, errorInfo: ErrorInfo) => {\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      errorBoundary: 'GlobalErrorBoundary',\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      userId: this.getCurrentUserId(),\n    };\n\n    // Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.group('ðŸš¨ Error Boundary Caught Error');\n      console.error('Error:', error);\n      console.error('Error Info:', errorInfo);\n      console.error('Full Context:', errorData);\n      console.groupEnd();\n    }\n\n    // In production, send to error reporting service\n    if (process.env.NODE_ENV === 'production') {\n      this.reportError(errorData).catch(console.error);\n    }\n  };\n\n  private getCurrentUserId = (): string | null => {\n    try {\n      const authData = localStorage.getItem('simple_orchestra_auth');\n      if (authData) {\n        const session = JSON.parse(authData);\n        return session.user?.id || null;\n      }\n    } catch {\n      // Ignore errors getting user ID\n    }\n    return null;\n  };\n\n  private reportError = async (errorData: Record<string, unknown>) => {\n    try {\n      // Replace with your error reporting service (Sentry, LogRocket, etc.)\n      await fetch('/api/errors', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(errorData),\n      });\n    } catch (reportingError) {\n      console.error('Failed to report error:', reportingError);\n    }\n  };\n\n  private handleRetry = () => {\n    if (this.retryCount < this.maxRetries) {\n      this.retryCount++;\n      this.setState({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n        errorId: '',\n      });\n    }\n  };\n\n  private handleReload = () => {\n    window.location.reload();\n  };\n\n  private handleGoHome = () => {\n    window.location.href = '/';\n  };\n\n  private copyErrorDetails = () => {\n    const { error, errorInfo, errorId } = this.state;\n    const errorDetails = {\n      id: errorId,\n      message: error?.message,\n      stack: error?.stack,\n      componentStack: errorInfo?.componentStack,\n      timestamp: new Date().toISOString(),\n    };\n\n    navigator.clipboard.writeText(JSON.stringify(errorDetails, null, 2))\n      .then(() => {\n        // Could show a toast here\n        console.log('Error details copied to clipboard');\n      })\n      .catch(() => {\n        console.error('Failed to copy error details');\n      });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      const { error, errorId } = this.state;\n      const canRetry = this.retryCount < this.maxRetries;\n\n      return (\n        <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-lg\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 w-12 h-12 bg-destructive/10 rounded-full flex items-center justify-center\">\n                <AlertTriangle className=\"h-6 w-6 text-destructive\" />\n              </div>\n              <CardTitle className=\"text-xl\">Something went wrong</CardTitle>\n              <CardDescription>\n                An unexpected error occurred. Our team has been notified.\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {process.env.NODE_ENV === 'development' && (\n                <Alert>\n                  <Bug className=\"h-4 w-4\" />\n                  <AlertDescription className=\"font-mono text-xs\">\n                    {error?.message || 'Unknown error'}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"text-sm text-muted-foreground text-center\">\n                Error ID: <code className=\"font-mono\">{errorId}</code>\n              </div>\n\n              <div className=\"flex flex-col gap-2\">\n                {canRetry && (\n                  <Button onClick={this.handleRetry} className=\"w-full\">\n                    <RefreshCw className=\"mr-2 h-4 w-4\" />\n                    Try Again ({this.maxRetries - this.retryCount} attempts left)\n                  </Button>\n                )}\n                \n                <Button \n                  variant=\"outline\" \n                  onClick={this.handleReload}\n                  className=\"w-full\"\n                >\n                  <RefreshCw className=\"mr-2 h-4 w-4\" />\n                  Reload Page\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  onClick={this.handleGoHome}\n                  className=\"w-full\"\n                >\n                  <Home className=\"mr-2 h-4 w-4\" />\n                  Go Home\n                </Button>\n              </div>\n\n              {process.env.NODE_ENV === 'development' && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={this.copyErrorDetails}\n                  className=\"w-full text-xs\"\n                >\n                  Copy Error Details\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Higher-order component for wrapping components with error boundary\nexport function withErrorBoundary<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  errorFallback?: ReactNode\n) {\n  const ComponentWithErrorBoundary = (props: P) => (\n    <GlobalErrorBoundary fallback={errorFallback}>\n      <WrappedComponent {...props} />\n    </GlobalErrorBoundary>\n  );\n\n  ComponentWithErrorBoundary.displayName = `withErrorBoundary(${WrappedComponent.displayName || WrappedComponent.name})`;\n  \n  return ComponentWithErrorBoundary;\n}\n\n// Hook for programmatic error reporting\nexport function useErrorReporting() {\n  const reportError = React.useCallback((error: Error, context?: Record<string, unknown>) => {\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      context,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Manual Error Report:', errorData);\n    }\n\n    // Report to error service in production\n    if (process.env.NODE_ENV === 'production') {\n      fetch('/api/errors', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(errorData),\n      }).catch(console.error);\n    }\n  }, []);\n\n  return { reportError };\n}\n\nexport default GlobalErrorBoundary;