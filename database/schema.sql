-- Simple Orchestra Database Schema\n-- PostgreSQL/Supabase compatible schema\n\n-- Enable UUID extension\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Enable timestamp functions\nCREATE EXTENSION IF NOT EXISTS \"pg_cron\";\n\n-- Users table (extends Supabase auth.users)\nCREATE TABLE public.users (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  name VARCHAR(100),\n  avatar_url TEXT,\n  role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'admin', 'moderator')),\n  email_verified BOOLEAN DEFAULT false,\n  settings JSONB DEFAULT '{}',\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Projects table\nCREATE TABLE public.projects (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name VARCHAR(100) NOT NULL,\n  description TEXT,\n  status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'archived', 'draft')),\n  settings JSONB DEFAULT '{}',\n  metadata JSONB DEFAULT '{}',\n  created_by UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Project collaborators (many-to-many)\nCREATE TABLE public.project_collaborators (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  project_id UUID NOT NULL REFERENCES public.projects(id) ON DELETE CASCADE,\n  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,\n  role VARCHAR(20) DEFAULT 'viewer' CHECK (role IN ('owner', 'editor', 'viewer')),\n  invited_by UUID REFERENCES public.users(id),\n  invited_at TIMESTAMPTZ DEFAULT NOW(),\n  UNIQUE(project_id, user_id)\n);\n\n-- Agents table\nCREATE TABLE public.agents (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name VARCHAR(100) NOT NULL,\n  description TEXT,\n  type VARCHAR(50) NOT NULL CHECK (type IN ('llm', 'tool', 'human', 'custom')),\n  config JSONB NOT NULL DEFAULT '{}',\n  capabilities TEXT[] DEFAULT '{}',\n  status VARCHAR(20) DEFAULT 'inactive' CHECK (status IN ('active', 'inactive', 'error', 'deploying')),\n  version VARCHAR(20) DEFAULT '1.0.0',\n  metadata JSONB DEFAULT '{}',\n  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,\n  created_by UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Workflows table\nCREATE TABLE public.workflows (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name VARCHAR(100) NOT NULL,\n  description TEXT,\n  version VARCHAR(20) DEFAULT '1.0.0',\n  definition JSONB NOT NULL, -- stores the workflow steps and connections\n  status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'active', 'archived', 'deprecated')),\n  tags TEXT[] DEFAULT '{}',\n  metadata JSONB DEFAULT '{}',\n  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,\n  created_by UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Workflow executions\nCREATE TABLE public.workflow_executions (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  workflow_id UUID NOT NULL REFERENCES public.workflows(id) ON DELETE CASCADE,\n  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'running', 'completed', 'failed', 'cancelled', 'timeout')),\n  inputs JSONB DEFAULT '{}',\n  outputs JSONB DEFAULT '{}',\n  error_message TEXT,\n  started_at TIMESTAMPTZ DEFAULT NOW(),\n  completed_at TIMESTAMPTZ,\n  duration_ms INTEGER,\n  triggered_by UUID REFERENCES public.users(id),\n  trigger_type VARCHAR(50) DEFAULT 'manual' CHECK (trigger_type IN ('manual', 'scheduled', 'webhook', 'event')),\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Workflow step executions\nCREATE TABLE public.workflow_step_executions (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  execution_id UUID NOT NULL REFERENCES public.workflow_executions(id) ON DELETE CASCADE,\n  step_id VARCHAR(100) NOT NULL, -- references step ID in workflow definition\n  agent_id UUID REFERENCES public.agents(id),\n  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'running', 'completed', 'failed', 'skipped', 'timeout')),\n  inputs JSONB DEFAULT '{}',\n  outputs JSONB DEFAULT '{}',\n  error_message TEXT,\n  started_at TIMESTAMPTZ,\n  completed_at TIMESTAMPTZ,\n  duration_ms INTEGER,\n  retry_count INTEGER DEFAULT 0,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Activity logs\nCREATE TABLE public.activity_logs (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  type VARCHAR(50) NOT NULL,\n  action VARCHAR(100) NOT NULL,\n  resource_type VARCHAR(50) NOT NULL,\n  resource_id UUID,\n  user_id UUID REFERENCES public.users(id),\n  project_id UUID REFERENCES public.projects(id),\n  details JSONB DEFAULT '{}',\n  ip_address INET,\n  user_agent TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Data connections\nCREATE TABLE public.data_connections (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name VARCHAR(100) NOT NULL,\n  type VARCHAR(50) NOT NULL CHECK (type IN ('database', 'api', 'file', 'webhook')),\n  config JSONB NOT NULL DEFAULT '{}', -- encrypted connection details\n  schema JSONB DEFAULT '{}',\n  status VARCHAR(20) DEFAULT 'disconnected' CHECK (status IN ('connected', 'disconnected', 'error', 'testing')),\n  last_tested_at TIMESTAMPTZ,\n  test_result JSONB,\n  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,\n  created_by UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Agent executions (for monitoring and metrics)\nCREATE TABLE public.agent_executions (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  agent_id UUID NOT NULL REFERENCES public.agents(id) ON DELETE CASCADE,\n  workflow_execution_id UUID REFERENCES public.workflow_executions(id) ON DELETE CASCADE,\n  step_execution_id UUID REFERENCES public.workflow_step_executions(id) ON DELETE CASCADE,\n  status VARCHAR(20) DEFAULT 'idle' CHECK (status IN ('idle', 'busy', 'error', 'offline')),\n  current_task TEXT,\n  metrics JSONB DEFAULT '{}',\n  started_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- System logs for debugging and monitoring\nCREATE TABLE public.system_logs (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  level VARCHAR(10) NOT NULL CHECK (level IN ('debug', 'info', 'warn', 'error', 'fatal')),\n  message TEXT NOT NULL,\n  context JSONB DEFAULT '{}',\n  source VARCHAR(100) NOT NULL,\n  correlation_id UUID,\n  user_id UUID REFERENCES public.users(id),\n  project_id UUID REFERENCES public.projects(id),\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Approvals table for workflow approvals\nCREATE TABLE public.approvals (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  workflow_execution_id UUID NOT NULL REFERENCES public.workflow_executions(id) ON DELETE CASCADE,\n  step_execution_id UUID REFERENCES public.workflow_step_executions(id) ON DELETE CASCADE,\n  type VARCHAR(50) NOT NULL,\n  title VARCHAR(200) NOT NULL,\n  description TEXT,\n  data JSONB DEFAULT '{}',\n  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'expired')),\n  requested_by UUID NOT NULL REFERENCES public.users(id),\n  assigned_to UUID[] DEFAULT '{}',\n  approved_by UUID REFERENCES public.users(id),\n  approved_at TIMESTAMPTZ,\n  expires_at TIMESTAMPTZ,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Indexes for performance\nCREATE INDEX idx_projects_created_by ON public.projects(created_by);\nCREATE INDEX idx_projects_status ON public.projects(status);\nCREATE INDEX idx_project_collaborators_project_id ON public.project_collaborators(project_id);\nCREATE INDEX idx_project_collaborators_user_id ON public.project_collaborators(user_id);\n\nCREATE INDEX idx_agents_project_id ON public.agents(project_id);\nCREATE INDEX idx_agents_created_by ON public.agents(created_by);\nCREATE INDEX idx_agents_status ON public.agents(status);\nCREATE INDEX idx_agents_type ON public.agents(type);\n\nCREATE INDEX idx_workflows_project_id ON public.workflows(project_id);\nCREATE INDEX idx_workflows_created_by ON public.workflows(created_by);\nCREATE INDEX idx_workflows_status ON public.workflows(status);\nCREATE INDEX idx_workflows_tags ON public.workflows USING GIN(tags);\n\nCREATE INDEX idx_workflow_executions_workflow_id ON public.workflow_executions(workflow_id);\nCREATE INDEX idx_workflow_executions_status ON public.workflow_executions(status);\nCREATE INDEX idx_workflow_executions_triggered_by ON public.workflow_executions(triggered_by);\nCREATE INDEX idx_workflow_executions_started_at ON public.workflow_executions(started_at);\n\nCREATE INDEX idx_workflow_step_executions_execution_id ON public.workflow_step_executions(execution_id);\nCREATE INDEX idx_workflow_step_executions_agent_id ON public.workflow_step_executions(agent_id);\nCREATE INDEX idx_workflow_step_executions_status ON public.workflow_step_executions(status);\n\nCREATE INDEX idx_activity_logs_user_id ON public.activity_logs(user_id);\nCREATE INDEX idx_activity_logs_project_id ON public.activity_logs(project_id);\nCREATE INDEX idx_activity_logs_type ON public.activity_logs(type);\nCREATE INDEX idx_activity_logs_created_at ON public.activity_logs(created_at);\nCREATE INDEX idx_activity_logs_resource_type_id ON public.activity_logs(resource_type, resource_id);\n\nCREATE INDEX idx_data_connections_project_id ON public.data_connections(project_id);\nCREATE INDEX idx_data_connections_created_by ON public.data_connections(created_by);\nCREATE INDEX idx_data_connections_status ON public.data_connections(status);\n\nCREATE INDEX idx_agent_executions_agent_id ON public.agent_executions(agent_id);\nCREATE INDEX idx_agent_executions_workflow_execution_id ON public.agent_executions(workflow_execution_id);\nCREATE INDEX idx_agent_executions_status ON public.agent_executions(status);\n\nCREATE INDEX idx_system_logs_level ON public.system_logs(level);\nCREATE INDEX idx_system_logs_source ON public.system_logs(source);\nCREATE INDEX idx_system_logs_created_at ON public.system_logs(created_at);\nCREATE INDEX idx_system_logs_correlation_id ON public.system_logs(correlation_id);\n\nCREATE INDEX idx_approvals_workflow_execution_id ON public.approvals(workflow_execution_id);\nCREATE INDEX idx_approvals_status ON public.approvals(status);\nCREATE INDEX idx_approvals_assigned_to ON public.approvals USING GIN(assigned_to);\nCREATE INDEX idx_approvals_requested_by ON public.approvals(requested_by);\n\n-- Functions and triggers for updated_at timestamps\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply updated_at triggers\nCREATE TRIGGER update_users_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON public.projects FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_agents_updated_at BEFORE UPDATE ON public.agents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_workflows_updated_at BEFORE UPDATE ON public.workflows FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_data_connections_updated_at BEFORE UPDATE ON public.data_connections FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_agent_executions_updated_at BEFORE UPDATE ON public.agent_executions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Row Level Security (RLS) policies\nALTER TABLE public.users ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.project_collaborators ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.agents ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.workflows ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.workflow_executions ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.workflow_step_executions ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.activity_logs ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.data_connections ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.agent_executions ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.approvals ENABLE ROW LEVEL SECURITY;\n\n-- Basic RLS policies (users can access their own data and projects they collaborate on)\n\n-- Users can read their own profile and profiles of users in shared projects\nCREATE POLICY \"Users can view their own profile\" ON public.users\n  FOR SELECT USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update their own profile\" ON public.users\n  FOR UPDATE USING (auth.uid() = id);\n\n-- Projects access based on ownership and collaboration\nCREATE POLICY \"Users can view projects they own or collaborate on\" ON public.projects\n  FOR SELECT USING (\n    created_by = auth.uid() OR\n    id IN (\n      SELECT project_id FROM public.project_collaborators \n      WHERE user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can create projects\" ON public.projects\n  FOR INSERT WITH CHECK (created_by = auth.uid());\n\nCREATE POLICY \"Project owners can update their projects\" ON public.projects\n  FOR UPDATE USING (created_by = auth.uid());\n\nCREATE POLICY \"Project owners can delete their projects\" ON public.projects\n  FOR DELETE USING (created_by = auth.uid());\n\n-- Similar policies for other tables...\n-- (Additional RLS policies would be added based on specific access requirements)\n\n-- Seed data for development\nINSERT INTO public.users (id, email, name, role, email_verified) VALUES\n  ('00000000-0000-0000-0000-000000000001', 'admin@simpleorchestra.com', 'Admin User', 'admin', true),\n  ('00000000-0000-0000-0000-000000000002', 'demo@simpleorchestra.com', 'Demo User', 'user', true)\nON CONFLICT (email) DO NOTHING;\n\n-- Sample project\nINSERT INTO public.projects (id, name, description, created_by) VALUES\n  ('00000000-0000-0000-0000-000000000001', 'Sample Project', 'A demonstration project for Simple Orchestra', '00000000-0000-0000-0000-000000000001')\nON CONFLICT (id) DO NOTHING;\n\n-- Views for common queries\nCREATE VIEW public.project_summary AS\nSELECT \n  p.id,\n  p.name,\n  p.description,\n  p.status,\n  p.created_at,\n  u.name as created_by_name,\n  COUNT(DISTINCT w.id) as workflow_count,\n  COUNT(DISTINCT a.id) as agent_count,\n  COUNT(DISTINCT pc.user_id) as collaborator_count\nFROM public.projects p\nJOIN public.users u ON p.created_by = u.id\nLEFT JOIN public.workflows w ON p.id = w.project_id\nLEFT JOIN public.agents a ON p.id = a.project_id\nLEFT JOIN public.project_collaborators pc ON p.id = pc.project_id\nGROUP BY p.id, p.name, p.description, p.status, p.created_at, u.name;\n\nCREATE VIEW public.workflow_execution_summary AS\nSELECT \n  we.id,\n  we.workflow_id,\n  w.name as workflow_name,\n  we.status,\n  we.started_at,\n  we.completed_at,\n  we.duration_ms,\n  u.name as triggered_by_name,\n  COUNT(wse.id) as step_count,\n  COUNT(CASE WHEN wse.status = 'completed' THEN 1 END) as completed_steps,\n  COUNT(CASE WHEN wse.status = 'failed' THEN 1 END) as failed_steps\nFROM public.workflow_executions we\nJOIN public.workflows w ON we.workflow_id = w.id\nLEFT JOIN public.users u ON we.triggered_by = u.id\nLEFT JOIN public.workflow_step_executions wse ON we.id = wse.execution_id\nGROUP BY we.id, we.workflow_id, w.name, we.status, we.started_at, we.completed_at, we.duration_ms, u.name;\n\n-- Comments for documentation\nCOMMENT ON TABLE public.users IS 'User profiles and account information';\nCOMMENT ON TABLE public.projects IS 'Project containers for workflows and agents';\nCOMMENT ON TABLE public.agents IS 'AI agents and their configurations';\nCOMMENT ON TABLE public.workflows IS 'Workflow definitions and metadata';\nCOMMENT ON TABLE public.workflow_executions IS 'Individual workflow execution instances';\nCOMMENT ON TABLE public.workflow_step_executions IS 'Individual step executions within workflows';\nCOMMENT ON TABLE public.activity_logs IS 'User activity and audit trail';\nCOMMENT ON TABLE public.data_connections IS 'External data source connections';\nCOMMENT ON TABLE public.approvals IS 'Workflow approval requests and responses';"